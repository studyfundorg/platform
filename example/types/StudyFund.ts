/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StudyFundInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "SCHOLARSHIP_MANAGER_ROLE"
      | "awardScholarship"
      | "claimPrize"
      | "currentRaffleId"
      | "depositToReserve"
      | "donate"
      | "donationTierEntries"
      | "donorAddresses"
      | "donors"
      | "getRaffleRunnerUps"
      | "getRaffleWinners"
      | "getRoleAdmin"
      | "getScholarshipBalance"
      | "grantRole"
      | "hasRole"
      | "pause"
      | "paused"
      | "raffleEntryOwners"
      | "rafflePrizes"
      | "raffleTotalEntries"
      | "raffles"
      | "renounceRole"
      | "reserveBalance"
      | "reserveWallet"
      | "revokeRole"
      | "selectWinners"
      | "setReserveWallet"
      | "supportsInterface"
      | "totalDonations"
      | "unclaimedPrizes"
      | "unpause"
      | "usdt"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DonationReceived"
      | "Paused"
      | "PlatformFundsWithdrawn"
      | "PrizeCalculated"
      | "PrizesClaimed"
      | "RaffleCompleted"
      | "ReserveDeposited"
      | "ReserveWalletUpdated"
      | "ReserveWithdrawn"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "RunnerUpsSelected"
      | "ScholarshipAwarded"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SCHOLARSHIP_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardScholarship",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimPrize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentRaffleId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToReserve",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donationTierEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "donorAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "donors", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getRaffleRunnerUps",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRaffleWinners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getScholarshipBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "raffleEntryOwners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rafflePrizes",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "raffleTotalEntries",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "raffles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reserveBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reserveWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "selectWinners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setReserveWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDonations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unclaimedPrizes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "usdt", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SCHOLARSHIP_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardScholarship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimPrize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentRaffleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositToReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "donationTierEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "donorAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleRunnerUps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRaffleWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getScholarshipBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "raffleEntryOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rafflePrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raffleTotalEntries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raffles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reserveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReserveWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDonations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unclaimedPrizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdt", data: BytesLike): Result;
}

export namespace DonationReceivedEvent {
  export type InputTuple = [
    donor: AddressLike,
    amount: BigNumberish,
    entries: BigNumberish
  ];
  export type OutputTuple = [donor: string, amount: bigint, entries: bigint];
  export interface OutputObject {
    donor: string;
    amount: bigint;
    entries: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFundsWithdrawnEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizeCalculatedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    prizePool: BigNumberish,
    percentage: BigNumberish,
    calculatedPrize: BigNumberish
  ];
  export type OutputTuple = [
    raffleId: bigint,
    prizePool: bigint,
    percentage: bigint,
    calculatedPrize: bigint
  ];
  export interface OutputObject {
    raffleId: bigint;
    prizePool: bigint;
    percentage: bigint;
    calculatedPrize: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PrizesClaimedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    winner: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [raffleId: bigint, winner: string, amount: bigint];
  export interface OutputObject {
    raffleId: bigint;
    winner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RaffleCompletedEvent {
  export type InputTuple = [
    raffleId: BigNumberish,
    winners: AddressLike[],
    prizes: BigNumberish[]
  ];
  export type OutputTuple = [
    raffleId: bigint,
    winners: string[],
    prizes: bigint[]
  ];
  export interface OutputObject {
    raffleId: bigint;
    winners: string[];
    prizes: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveDepositedEvent {
  export type InputTuple = [admin: AddressLike, amount: BigNumberish];
  export type OutputTuple = [admin: string, amount: bigint];
  export interface OutputObject {
    admin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveWalletUpdatedEvent {
  export type InputTuple = [oldWallet: AddressLike, newWallet: AddressLike];
  export type OutputTuple = [oldWallet: string, newWallet: string];
  export interface OutputObject {
    oldWallet: string;
    newWallet: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReserveWithdrawnEvent {
  export type InputTuple = [amount: BigNumberish, purpose: string];
  export type OutputTuple = [amount: bigint, purpose: string];
  export interface OutputObject {
    amount: bigint;
    purpose: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RunnerUpsSelectedEvent {
  export type InputTuple = [raffleId: BigNumberish, runnerUps: AddressLike[]];
  export type OutputTuple = [raffleId: bigint, runnerUps: string[]];
  export interface OutputObject {
    raffleId: bigint;
    runnerUps: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ScholarshipAwardedEvent {
  export type InputTuple = [recipient: AddressLike, amount: BigNumberish];
  export type OutputTuple = [recipient: string, amount: bigint];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StudyFund extends BaseContract {
  connect(runner?: ContractRunner | null): StudyFund;
  waitForDeployment(): Promise<this>;

  interface: StudyFundInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  SCHOLARSHIP_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  awardScholarship: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  claimPrize: TypedContractMethod<[], [void], "nonpayable">;

  currentRaffleId: TypedContractMethod<[], [bigint], "view">;

  depositToReserve: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  donate: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  donationTierEntries: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  donorAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  donors: TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { totalDonated: bigint; entries: bigint }],
    "view"
  >;

  getRaffleRunnerUps: TypedContractMethod<
    [raffleId: BigNumberish],
    [string[]],
    "view"
  >;

  getRaffleWinners: TypedContractMethod<
    [raffleId: BigNumberish],
    [string[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getScholarshipBalance: TypedContractMethod<[], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  raffleEntryOwners: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;

  rafflePrizes: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  raffleTotalEntries: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  raffles: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        startTime: bigint;
        endTime: bigint;
        prizePool: bigint;
        donations: bigint;
        completed: boolean;
        requestId: bigint;
      }
    ],
    "view"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  reserveBalance: TypedContractMethod<[], [bigint], "view">;

  reserveWallet: TypedContractMethod<[], [string], "view">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  selectWinners: TypedContractMethod<[], [void], "nonpayable">;

  setReserveWallet: TypedContractMethod<
    [_newWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalDonations: TypedContractMethod<[], [bigint], "view">;

  unclaimedPrizes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  usdt: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SCHOLARSHIP_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "awardScholarship"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "claimPrize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "currentRaffleId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositToReserve"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donate"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "donationTierEntries"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "donorAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "donors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[bigint, bigint] & { totalDonated: bigint; entries: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRaffleRunnerUps"
  ): TypedContractMethod<[raffleId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRaffleWinners"
  ): TypedContractMethod<[raffleId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getScholarshipBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "raffleEntryOwners"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "rafflePrizes"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "raffleTotalEntries"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "raffles"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean, bigint] & {
        startTime: bigint;
        endTime: bigint;
        prizePool: bigint;
        donations: bigint;
        completed: boolean;
        requestId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reserveBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "reserveWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectWinners"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setReserveWallet"
  ): TypedContractMethod<[_newWallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalDonations"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unclaimedPrizes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdt"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DonationReceived"
  ): TypedContractEvent<
    DonationReceivedEvent.InputTuple,
    DonationReceivedEvent.OutputTuple,
    DonationReceivedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFundsWithdrawn"
  ): TypedContractEvent<
    PlatformFundsWithdrawnEvent.InputTuple,
    PlatformFundsWithdrawnEvent.OutputTuple,
    PlatformFundsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "PrizeCalculated"
  ): TypedContractEvent<
    PrizeCalculatedEvent.InputTuple,
    PrizeCalculatedEvent.OutputTuple,
    PrizeCalculatedEvent.OutputObject
  >;
  getEvent(
    key: "PrizesClaimed"
  ): TypedContractEvent<
    PrizesClaimedEvent.InputTuple,
    PrizesClaimedEvent.OutputTuple,
    PrizesClaimedEvent.OutputObject
  >;
  getEvent(
    key: "RaffleCompleted"
  ): TypedContractEvent<
    RaffleCompletedEvent.InputTuple,
    RaffleCompletedEvent.OutputTuple,
    RaffleCompletedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveDeposited"
  ): TypedContractEvent<
    ReserveDepositedEvent.InputTuple,
    ReserveDepositedEvent.OutputTuple,
    ReserveDepositedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveWalletUpdated"
  ): TypedContractEvent<
    ReserveWalletUpdatedEvent.InputTuple,
    ReserveWalletUpdatedEvent.OutputTuple,
    ReserveWalletUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ReserveWithdrawn"
  ): TypedContractEvent<
    ReserveWithdrawnEvent.InputTuple,
    ReserveWithdrawnEvent.OutputTuple,
    ReserveWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "RunnerUpsSelected"
  ): TypedContractEvent<
    RunnerUpsSelectedEvent.InputTuple,
    RunnerUpsSelectedEvent.OutputTuple,
    RunnerUpsSelectedEvent.OutputObject
  >;
  getEvent(
    key: "ScholarshipAwarded"
  ): TypedContractEvent<
    ScholarshipAwardedEvent.InputTuple,
    ScholarshipAwardedEvent.OutputTuple,
    ScholarshipAwardedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "DonationReceived(address,uint256,uint256)": TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;
    DonationReceived: TypedContractEvent<
      DonationReceivedEvent.InputTuple,
      DonationReceivedEvent.OutputTuple,
      DonationReceivedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PlatformFundsWithdrawn(address,uint256)": TypedContractEvent<
      PlatformFundsWithdrawnEvent.InputTuple,
      PlatformFundsWithdrawnEvent.OutputTuple,
      PlatformFundsWithdrawnEvent.OutputObject
    >;
    PlatformFundsWithdrawn: TypedContractEvent<
      PlatformFundsWithdrawnEvent.InputTuple,
      PlatformFundsWithdrawnEvent.OutputTuple,
      PlatformFundsWithdrawnEvent.OutputObject
    >;

    "PrizeCalculated(uint256,uint256,uint256,uint256)": TypedContractEvent<
      PrizeCalculatedEvent.InputTuple,
      PrizeCalculatedEvent.OutputTuple,
      PrizeCalculatedEvent.OutputObject
    >;
    PrizeCalculated: TypedContractEvent<
      PrizeCalculatedEvent.InputTuple,
      PrizeCalculatedEvent.OutputTuple,
      PrizeCalculatedEvent.OutputObject
    >;

    "PrizesClaimed(uint256,address,uint256)": TypedContractEvent<
      PrizesClaimedEvent.InputTuple,
      PrizesClaimedEvent.OutputTuple,
      PrizesClaimedEvent.OutputObject
    >;
    PrizesClaimed: TypedContractEvent<
      PrizesClaimedEvent.InputTuple,
      PrizesClaimedEvent.OutputTuple,
      PrizesClaimedEvent.OutputObject
    >;

    "RaffleCompleted(uint256,address[],uint256[])": TypedContractEvent<
      RaffleCompletedEvent.InputTuple,
      RaffleCompletedEvent.OutputTuple,
      RaffleCompletedEvent.OutputObject
    >;
    RaffleCompleted: TypedContractEvent<
      RaffleCompletedEvent.InputTuple,
      RaffleCompletedEvent.OutputTuple,
      RaffleCompletedEvent.OutputObject
    >;

    "ReserveDeposited(address,uint256)": TypedContractEvent<
      ReserveDepositedEvent.InputTuple,
      ReserveDepositedEvent.OutputTuple,
      ReserveDepositedEvent.OutputObject
    >;
    ReserveDeposited: TypedContractEvent<
      ReserveDepositedEvent.InputTuple,
      ReserveDepositedEvent.OutputTuple,
      ReserveDepositedEvent.OutputObject
    >;

    "ReserveWalletUpdated(address,address)": TypedContractEvent<
      ReserveWalletUpdatedEvent.InputTuple,
      ReserveWalletUpdatedEvent.OutputTuple,
      ReserveWalletUpdatedEvent.OutputObject
    >;
    ReserveWalletUpdated: TypedContractEvent<
      ReserveWalletUpdatedEvent.InputTuple,
      ReserveWalletUpdatedEvent.OutputTuple,
      ReserveWalletUpdatedEvent.OutputObject
    >;

    "ReserveWithdrawn(uint256,string)": TypedContractEvent<
      ReserveWithdrawnEvent.InputTuple,
      ReserveWithdrawnEvent.OutputTuple,
      ReserveWithdrawnEvent.OutputObject
    >;
    ReserveWithdrawn: TypedContractEvent<
      ReserveWithdrawnEvent.InputTuple,
      ReserveWithdrawnEvent.OutputTuple,
      ReserveWithdrawnEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "RunnerUpsSelected(uint256,address[])": TypedContractEvent<
      RunnerUpsSelectedEvent.InputTuple,
      RunnerUpsSelectedEvent.OutputTuple,
      RunnerUpsSelectedEvent.OutputObject
    >;
    RunnerUpsSelected: TypedContractEvent<
      RunnerUpsSelectedEvent.InputTuple,
      RunnerUpsSelectedEvent.OutputTuple,
      RunnerUpsSelectedEvent.OutputObject
    >;

    "ScholarshipAwarded(address,uint256)": TypedContractEvent<
      ScholarshipAwardedEvent.InputTuple,
      ScholarshipAwardedEvent.OutputTuple,
      ScholarshipAwardedEvent.OutputObject
    >;
    ScholarshipAwarded: TypedContractEvent<
      ScholarshipAwardedEvent.InputTuple,
      ScholarshipAwardedEvent.OutputTuple,
      ScholarshipAwardedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
